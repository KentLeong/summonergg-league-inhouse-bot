"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = void 0;
var dotenv = __importStar(require("dotenv"));
dotenv.config();
var c = __importStar(require("chalk"));
var chalk = new c.Instance;
var log = {
    title: function (message) {
        if (process.env.DEV == "false")
            return;
        console.log(chalk.bold(message));
    },
    success: function (message) {
        if (process.env.DEV == "false")
            return;
        var status = chalk.green("success ");
        console.log(status + message);
    },
    warning: function (message) {
        if (process.env.DEV == "false")
            return;
        var status = chalk.yellow("warning ");
        console.log(status + message);
    },
    info: function (message) {
        if (process.env.DEV == "false")
            return;
        var status = chalk.blue("info ");
        console.log(status + message);
    },
    error: function (message) {
        if (process.env.DEV == "false")
            return;
        var status = chalk.red("error ");
        console.log(status + message);
    },
    complete: function (message) {
        if (process.env.DEV == "false")
            return;
        var status = chalk.magenta("complete ");
        console.log(status + message);
    },
    group: function (messages) {
        if (process.env.DEV == "false")
            return;
        var branch = "├─";
        var end = "└─";
        for (var i = 0; i < messages.length; i++) {
            if (i + 1 === messages.length)
                return console.log(end + " " + messages[i]);
            console.log(branch + " " + messages[i]);
        }
    },
    branch: function (message) {
        if (process.env.DEV == "false")
            return;
        console.log("├─ " + message);
    },
    openBranch: function (message) {
        if (process.env.DEV == "false")
            return;
        console.log("├  " + message);
    },
    endBranch: function (message) {
        if (process.env.DEV == "false")
            return;
        console.log("└─ " + message);
    }
};
exports.log = log;
