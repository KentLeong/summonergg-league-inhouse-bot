"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LobbyBot = void 0;
const tslib_1 = require("tslib");
const dotenv_1 = tslib_1.__importDefault(require("dotenv"));
dotenv_1.default.config();
const socket_io_client_1 = tslib_1.__importDefault(require("socket.io-client"));
const awaitSocket_1 = require("./modules/awaitSocket");
const chalk_logging_1 = tslib_1.__importDefault(require("chalk-logging"));
class LobbyBot {
    constructor(socket) {
        this.socket = socket;
        this.socket.on("updateBot", (data) => {
            if (data.region)
                this.socket.region = data.region;
            if (data.name)
                this.socket.name = data.name;
        });
    }
    static connect(region, name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                var options = {
                    auth: {
                        token: process.env.INTERNAL,
                        region: region
                    }
                };
                if (name)
                    options.auth.name = name;
                var socket = socket_io_client_1.default("ws://127.0.0.1:54221", options);
                var timer = setTimeout(() => {
                    reject("LobbyBot: Timed out trying to connect");
                }, 5000);
                socket.on("connect", () => {
                    clearInterval(timer);
                    resolve(new LobbyBot(socket));
                });
            });
        });
    }
    getState() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield awaitSocket_1.awaitSocket(this.socket, "getState", {});
            }
            catch (err) {
                chalk_logging_1.default.error(err);
            }
        });
    }
    createLobby(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield awaitSocket_1.awaitSocket(this.socket, "createLobby", data);
            }
            catch (err) {
                chalk_logging_1.default.error(err);
            }
        });
    }
    getSummoner(summoner) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield awaitSocket_1.awaitSocket(this.socket, "getSummoner", { summoner: summoner });
            }
            catch (err) {
                chalk_logging_1.default.error(err);
            }
        });
    }
    invitePlayer(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield awaitSocket_1.awaitSocket(this.socket, "invitePlayer", { id: id });
            }
            catch (err) {
                chalk_logging_1.default.error(err);
            }
        });
    }
    switchTeams(team) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield awaitSocket_1.awaitSocket(this.socket, "switchTeams", { team: team });
            }
            catch (err) {
                chalk_logging_1.default.error(err);
            }
        });
    }
    lobbyDetails() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield awaitSocket_1.awaitSocket(this.socket, "lobbyDetails", {});
            }
            catch (err) {
                chalk_logging_1.default.error(err);
            }
        });
    }
    leaveLobby() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield awaitSocket_1.awaitSocket(this.socket, "leaveLobby", {});
            }
            catch (err) {
                chalk_logging_1.default.error(err);
            }
        });
    }
    disconnect() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.socket.disconnect();
        });
    }
}
exports.LobbyBot = LobbyBot;
//# sourceMappingURL=index.js.map