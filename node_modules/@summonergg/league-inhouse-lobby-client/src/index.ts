import dotenv from "dotenv";
dotenv.config();

import io from "socket.io-client";
import { awaitSocket } from "./modules/awaitSocket";
import log from "chalk-logging";

interface LobbyOptions {
  auth: {
    token: string;
    region: string;
    name?: string;
  }
}

export class LobbyBot {
  socket: LobbySocket;

  constructor(socket: LobbySocket) {
    this.socket = socket
    this.socket.on("updateBot", (data: any) => {
      if (data.region) this.socket.region = data.region;
      if (data.name) this.socket.name = data.name;
    })
  }

  static async connect(region: regions, name?: string):Promise<LobbyBot> {
    return new Promise((resolve: any, reject: any) => {
      var options: LobbyOptions = {
        auth: {
          token: process.env.INTERNAL,
          region: region
        }
      }
      if (name) options.auth.name = name;
      var socket: LobbySocket = io("ws://127.0.0.1:54221", options);

      var timer = setTimeout(() => {
        reject("LobbyBot: Timed out trying to connect");
      }, 5000)

      socket.on("connect", () => {
        clearInterval(timer);
        resolve(new LobbyBot(socket));
      })

    })
  }

  async getState() {
    try {
      return await awaitSocket(this.socket, "getState", {});
    } catch(err) {
      log.error(err);
    }
  }

  async createLobby(data: any) {
    try {
      return await awaitSocket(this.socket, "createLobby", data);
    } catch(err) {
      log.error(err);
    }
  }

  async getSummoner(summoner: string) {
    try {
      return await awaitSocket(this.socket, "getSummoner", {summoner: summoner});
    } catch(err) {
      log.error(err);
    }
  }

  async invitePlayer(id: string) {
    try {
      return await awaitSocket(this.socket, "invitePlayer", {id: id});
    } catch(err) {
      log.error(err);
    }
  }

  async switchTeams(team: switchTeamOptions) {
    try {
      return await awaitSocket(this.socket, "switchTeams", {team: team});
    } catch(err) { 
      log.error(err);
    }
  }

  async lobbyDetails() {
    try {
      return await awaitSocket(this.socket, "lobbyDetails", {});
    } catch(err) {
      log.error(err);
    }
  }

  async leaveLobby() {
    try {
      return await awaitSocket(this.socket, "leaveLobby", {});
    } catch(err) {
      log.error(err);
    }
  }

  async disconnect() {
    this.socket.disconnect();
  }
}