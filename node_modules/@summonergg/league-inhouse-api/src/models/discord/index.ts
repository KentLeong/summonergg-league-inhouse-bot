import { translate, regions } from "../../modules"
import { User, Token, Guild } from "../../";
import { Summoner } from "@summonergg/riot-api";
import { LobbyBot } from "@summonergg/league-inhouse-lobby-client";
import { Game } from "../game";
import randomize from "randomatic";
import Discord from "discord.js";
import log from "chalk-logging";

type userOptions = "hasSummoner" | "isNotInGame"
export class DiscordAPI {
  res?: TranslateResponse;
  region?: regions;
  name?: string;
  summoner?: Summoner;
  user?: User;
  msg?: DiscordMessage;
  client?: DiscordClient;
  args?: string[];
  discordId?: string;
  clientType?: clientType;
  guild?: Discord.Guild;
  server?: Guild;
  channel?: string;

  constructor(
    public opt?: apiOptions
  ) {
    // handle if options is either a message or client
    if (opt?.msg) {
      this.msg = opt.msg;
      this.discordId = this.msg.author.id;
      this.args = opt.msg?.args;
      this.guild = this.msg.guild;
      this.server = this.msg.server;
      this.channel = this.msg.channel?.id;
      this.clientType = {
        msg: this.msg
      }
      this.res = translate(this.msg, "discord");
    } else if (opt?.client) {
      this.client = opt.client;
    } else {
      throw Error("No option was selected");
    }
  }
  
  async signupValid(): Promise<boolean> {
    return new Promise(async (resolve: any, reject: any) => {
      // check if region is empty
      var region = this.args?.shift() as regions;
      if (!region) return reject(this.res(200, {region: region}));
      this.region = region;
    
      // check if region is valid
      if (!Object.keys(regions).includes(region.toLowerCase())) reject(this.res(201));

      // get name
      var name = this.args.join(" ");
      if (!name) return reject(this.res(202));
      this.name = name;

      // check if name is more than 16 characters
      if (name.length > 16) return reject(this.res(203));
      resolve(true);
    })
  }

  async summonerTaken(): Promise<boolean> {
    return new Promise(async (resolve: any, reject: any) => {
      // check if summoner exists
      var summoner: Summoner = await Summoner.get({name: this.name, region: this.region});
      if (!summoner) return reject(this.res(204, {name: this.name}));
      this.summoner = summoner;

      // check if summoner is already in use
      if (this.msg) {
        var user: User = await User.getBySummonerId({id: summoner.id, region: this.msg.server.region}, this.msg);
      }
      if (user) return reject(this.res(205, {name: summoner.name}));
      resolve(true);
    })
  }

  async createToken(): Promise<void> {
    return new Promise(async (resolve: any, reject: any) => {
      // check if token exists
      var token: Token = await Token.findOne({discordId: this.discordId});
      if (!token && this.msg) {
        token = await Token.new({
          msg: this.msg,
          discordId: this.msg.member.id,
          summonerId: this.summoner.id,
          region: this.region
        })
        await token.generateNew(this.summoner.profileIconId);
      } else if (!token && this.client) {
        token = await Token.new({
          discordId: this.discordId,
          summonerId: this.summoner.id,
          region: this.region
        })
      } else { 
        token.region = this.region;
        token.summonerId = this.summoner.id;
        await token.generateNew(this.summoner.profileIconId);
      }
      this.res(300, {token: token, summoner: this.summoner});
      resolve();
    })
  }

  async getToken(): Promise<Token> {
    return new Promise(async (resolve: any, reject: any) => {
      var token = await Token.findOne({
        discordId: this.discordId
      }, this.clientType);
      if (!token) return reject(this.res(206));
      resolve(token);
    })
  }

  async compareIcons(summoner: Summoner, token: Token): Promise<boolean> {
    return new Promise(async (resolve: any, reject: any) => {
      if (summoner.profileIconId != token.profileIconId) return reject(this.res(207));
      resolve(true);
    })
  }

  async findOrCreateUser(): Promise<User> {
    return new Promise(async (resolve: any, reject: any) => {
      var user: User = await User.findOne({
        discordId: this.discordId
      }, this.clientType);
      if (!user) {
        user = await User.new({
          discordId: this.discordId
        }, this.clientType);
        this.msg.member.roles.add(this.msg.server.roles.member);
      }
      this.user = user;
      resolve(user);
    })
  }

  async findUser(options?: Array<userOptions>): Promise<User> {
    return new Promise(async (resolve: any, reject: any) => {
      var user: User = await User.findOne({
        discordId: this.discordId
      }, this.clientType);
      if (!user) reject(this.res(208));
      if (options?.includes("hasSummoner") && !user.accounts.lol[0]) return reject(this.res(211));
      if (options?.includes("isNotInGame")) {
        var inGame = await user.isInGame();
        if (inGame) return reject(this.res(213));
      }
      this.user = user;
      resolve(user);
    })
  }

  async findGame(options?: Record<string, string>): Promise<Game> {
    return new Promise(async (resolve: any, reject: any) => {
      var game: Game = await Game.findOne({
        server: this.msg.guild.id ?? options.server,
        channel: this.msg.channel.id ?? options.channel,
        state: "lobby" ?? options.state
      }, this.clientType)
      if (!game) return reject(this.res(209));
      resolve(game);
    })
  }

  async hostGame(host: User, options?: any): Promise<Game> {
    return new Promise(async (resolve: any, reject: any) => {
      // check if channel is a valid channel
      if (!this.server.channels.hosts.includes(this.channel)) return reject(this.res(215))

      // check if game is already being hosted
      var gameExists = await Game.findOne({
        server: this.server.id,
        channel: this.channel
      }, this.clientType);
      if (gameExists) return reject(this.res(214));

      // try to connect to a lobby bot
      var name = randomize("aA0", 5);
      var password = randomize("aA0", 10);
      try {
        var bot: LobbyBot = await LobbyBot.connect(this.msg.server.region.toUpperCase());
      } catch(err) { log.error(err) }

      if (!bot) return reject(this.res(210));
      await bot.createLobby({
          map: "11",
          mode: "6",
          teamSize: 5,
          id: name,
          password: password
      });

      host.ready = false;

      var player = {
        account: host.accounts.lol[0],
        discordId: host.discordId,
        ready: false,
        roles: host.roles.lol,
        gold: host.gold,
        level: host.level,
        experience: host.experience
      }
      let data: any = await bot.getSummoner(player.account.name);
      await bot.invitePlayer(data.summonerId);
      var game: Game = await Game.new({
        host: host.discordId,
        bot: bot.socket.name,
        name: name,
        players: [player],
        channel: this.channel,
        server: this.guild.id
      }, this.clientType)
      bot.disconnect();
      if (!game) return reject(this.res(212));
      resolve(game);
    })
  }
}