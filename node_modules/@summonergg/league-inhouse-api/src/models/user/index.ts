import log from "chalk-logging";
import { client, Game } from  "../../index";
import { API } from "../api";
import { Summoner, League } from "@summonergg/riot-api";
import { translate } from "../../modules";

interface lolAccount {
  profileIconId: number;
  name: string;
  puuid: string;
  summonerLevel: number;
  accountId: string;
  id: string;
  revisionDate: number;
  region?: string;
  rank?: string;
  lp?: number;
  wins?: number;
  losses?: number;
  elo?: number;
}

interface valAccount {

}

interface tftAccount {

}

interface lorAccount {

}

export class User extends API {
  discordId: string;
  roles: {
    lol: string[],
    val: string[],
    tft: string[],
    lor: string[]
  };
  gold: number;
  level: number;
  experience: number;
  active: boolean;
  accounts: {
    puuid: string;
    private: boolean;
    lol: lolAccount[],
    val: valAccount[],
    tft: tftAccount[],
    lor: lorAccount[]
  };
  createdAt: Date;
  lastUpdated: Date;
  ready: boolean;
  stats: {
    lol: any,
    val: any,
    tft: any,
    lor: any
  }

  res?: TranslateResponse;
  msg?: DiscordMessage;
  constructor(
    public opt?: apiOptions
  ) {
    super();
    if (opt?.msg) {
      this.msg = opt.msg;
      this.res = translate(this.msg, "user");
    }
  }
  static async getBySummonerId(data: Record<string, string>, msg?: DiscordMessage): Promise<User | any> {
    try {
      var res = await client(`/users/bySummonerId`, {params: data});
      return Object.assign(new User(msg), res.data);
    } catch(err) {
      log.warning(`User was not found by Summoner ID: ${data.id}`)
    }
  }

  async addSummoner(summoner: Summoner, region: string) {
    return new Promise(async (resolve: any, reject: any) => {
      summoner.rank = "unranked";
      summoner.lp = 0;
      summoner.elo = 0;
      summoner.region = region;
      var leagues = await League.get({summonerId: summoner.id, region: region}) as League[];
      if (!leagues) reject(this.res(100));
      leagues.forEach((league: League) => {
        if (league.queueType == "RANKED_SOLO_5x5") {
          league.formatELO();
          summoner.rank = league.tier + " " + league.rank;
          summoner.lp = league.leaguePoints;
          summoner.wins = league.wins;
          summoner.losses = league.losses;
          summoner.elo = league.elo;
        }
      })
      this.accounts.lol.unshift(summoner);
      this.accounts.lol.sort((a: any, b: any) => {
        return a.elo = b.elo;
      })
      this.save();
      this.res(101);
      resolve();
    })
  }

  async auth(role: UserAuth): Promise<boolean> {
    var roles = this.msg.server.roles;
    var auth: Record<string, number> = {
      leong: 5,
      owner: 4,
      mod: 3,
      hoster: 2,
      member: 1,
      none: 0
    }
    var authLevel = 0;
    if (this.msg.member?.id == "752025586171510865") {
      authLevel = 5;
    } else if (this.msg.member?.id == this.msg.guild?.owner?.id) {
      authLevel = 4;
    } else if (this.msg.member?.roles.cache.some(role => role.id === roles.mod)) {
      authLevel = 3;
    } else if (this.msg.member?.roles.cache.some(role => role.id === roles.hoster)) {
      authLevel = 2;
    } else if (this.msg.member?.roles.cache.some(role => role.id === roles.member)) {
      authLevel = 1;
    }
    return (authLevel >= auth[role])
  }

  async isInGame(): Promise<boolean> {
    try {
      var res = await client(`/users/isUserInGame`, {params: this});
      return Object.assign(new User(this.msg), res.data);
    } catch(err) {
    }
  }
}