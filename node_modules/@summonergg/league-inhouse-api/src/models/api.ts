import log from "chalk-logging";
import { client } from "../index";
import { handleError } from "res-codes";

export class API {
  constructor(
    public opt?: apiOptions
  ) {}
  static async find(options: Record<any, any>, opt?: apiOptions):Promise<any> {
    try {
      var res = await client.get(`/${this.name}s/`, {params: options});
      if (res.data.length === 0) {
        log.warning(res.statusText);
      } else {
        log.success(res.statusText);
      }
      return res.data.map((data: any) => data = Object.assign(new this(opt), data));
    } catch(err) {
      handleError(err);1
    }
  }

  static async findOne(options: Record<any,any>, opt?: apiOptions): Promise<any> {
    try {
      var res = await client.get(`/${this.name}s/findOne`, {params: options});
      log.success(res.statusText);
      return Object.assign(new this(opt), res.data);
    } catch(err) {
      handleError(err);
    }
  }

  static async new(options: Record<any, any>, opt?: apiOptions):Promise<any> {
    try {
      var res = await client.post(`/${this.name}s`, {[this.name.toLowerCase()]: options});
      log.success(res.statusText);
      return Object.assign(new this(opt), res.data);
    } catch(err) {
      handleError(err);
    }
  }

  async save():Promise<void> {
    var name = this.constructor.name.toLowerCase();
    try {
      var res = await client.put(`/${name}s/`, {[name]: this});

      log.success(res.statusText);
    } catch(err) {
      handleError(err);
    }
  }
  
  async delete():Promise<boolean> {
    var name = this.constructor.name.toLowerCase();
    try {
      var res = await client.delete(`/${name}s/`, {data: this});
      log.success(res.statusText);
      return true;
    } catch(err) {
      handleError(err);
    }
  }
}