"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.en_US = void 0;
const tslib_1 = require("tslib");
const discord_js_1 = tslib_1.__importDefault(require("discord.js"));
const en_US = (msg) => {
    return (id, args) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var ranked = ((_a = args === null || args === void 0 ? void 0 : args.game) === null || _a === void 0 ? void 0 : _a.ranked) ? "Ranked" : "Unranked";
        var res = {
            100: "Lobby has been canceled",
            200: "The max amount of players has been reached for this lobby",
            201: `${args === null || args === void 0 ? void 0 : args.player} was not found in the lobby`,
            202: `Please fill the lobby before you start`,
            203: `Not everyone in the lobby is ready`,
            300: `SummonerGG - ${ranked} - ${(_b = args === null || args === void 0 ? void 0 : args.game) === null || _b === void 0 ? void 0 : _b.map}${(_c = args === null || args === void 0 ? void 0 : args.game) === null || _c === void 0 ? void 0 : _c.draft}`,
            350: `<@${(_d = args === null || args === void 0 ? void 0 : args.user) === null || _d === void 0 ? void 0 : _d.id}> Please select which pick order you want by typing \`fp\` or \`sp\``
        };
        if (id >= 350) {
            args === null || args === void 0 ? void 0 : args.channel.send(res[id]).then((data) => {
                setTimeout(() => {
                    if (data.deletable)
                        data.delete();
                }, 5000);
            });
        }
        else if (id === 300) {
            var message = new discord_js_1.default.MessageEmbed({
                type: "rich",
                title: res[300],
                fields: []
            });
            if (((_e = args === null || args === void 0 ? void 0 : args.teams) === null || _e === void 0 ? void 0 : _e.one) && ((_f = args === null || args === void 0 ? void 0 : args.teams) === null || _f === void 0 ? void 0 : _f.two)) {
                message.fields.push({
                    name: "Team 1",
                    value: (_g = args === null || args === void 0 ? void 0 : args.teams) === null || _g === void 0 ? void 0 : _g.one,
                    inline: true
                });
                message.fields.push({
                    name: "Team 2",
                    value: (_h = args === null || args === void 0 ? void 0 : args.teams) === null || _h === void 0 ? void 0 : _h.two,
                    inline: true
                });
            }
            if ((args === null || args === void 0 ? void 0 : args.lobby.length) != 0) {
                message.fields.push({
                    name: "Lobby",
                    value: args === null || args === void 0 ? void 0 : args.lobby,
                    inline: false
                });
            }
            if (!((_j = args === null || args === void 0 ? void 0 : args.game) === null || _j === void 0 ? void 0 : _j.message)) {
                msg.channel.send(message).then(data => {
                    args.game.message = data.id;
                    args.game.save();
                });
            }
            else {
                try {
                    var channel = yield msg.channel.messages.fetch((_k = args === null || args === void 0 ? void 0 : args.game) === null || _k === void 0 ? void 0 : _k.message);
                    channel.edit(message);
                }
                catch (err) {
                    console.error(err);
                }
            }
        }
        else if (id >= 200) {
            msg.reply(res[id]).then((data) => {
                setTimeout(() => {
                    if (data.deletable)
                        data.delete();
                }, 5000);
            });
        }
    });
};
exports.en_US = en_US;
//# sourceMappingURL=en_US.js.map