"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const tslib_1 = require("tslib");
const chalk_logging_1 = tslib_1.__importDefault(require("chalk-logging"));
const index_1 = require("../../index");
const api_1 = require("../api");
const riot_api_1 = require("@summonergg/riot-api");
const modules_1 = require("../../modules");
class User extends api_1.API {
    constructor(opt) {
        super();
        this.opt = opt;
        if (opt === null || opt === void 0 ? void 0 : opt.msg) {
            this.msg = opt.msg;
            this.res = modules_1.translate(this.msg, "user");
        }
    }
    static getBySummonerId(data, msg) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                var res = yield index_1.client(`/users/bySummonerId`, { params: data });
                return Object.assign(new User(msg), res.data);
            }
            catch (err) {
                chalk_logging_1.default.warning(`User was not found by Summoner ID: ${data.id}`);
            }
        });
    }
    addSummoner(summoner, region) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                summoner.rank = "unranked";
                summoner.lp = 0;
                summoner.elo = 0;
                summoner.region = region;
                var leagues = yield riot_api_1.League.get({ summonerId: summoner.id, region: region });
                if (!leagues)
                    reject(this.res(100));
                leagues.forEach((league) => {
                    if (league.queueType == "RANKED_SOLO_5x5") {
                        league.formatELO();
                        summoner.rank = league.tier + " " + league.rank;
                        summoner.lp = league.leaguePoints;
                        summoner.wins = league.wins;
                        summoner.losses = league.losses;
                        summoner.elo = league.elo;
                    }
                });
                this.accounts.lol.unshift(summoner);
                this.accounts.lol.sort((a, b) => {
                    return a.elo = b.elo;
                });
                this.save();
                this.res(101);
                resolve();
            }));
        });
    }
    auth(role) {
        var _a, _b, _c, _d, _e, _f, _g;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var roles = this.msg.server.roles;
            var auth = {
                leong: 5,
                owner: 4,
                mod: 3,
                hoster: 2,
                member: 1,
                none: 0
            };
            var authLevel = 0;
            if (((_a = this.msg.member) === null || _a === void 0 ? void 0 : _a.id) == "752025586171510865") {
                authLevel = 5;
            }
            else if (((_b = this.msg.member) === null || _b === void 0 ? void 0 : _b.id) == ((_d = (_c = this.msg.guild) === null || _c === void 0 ? void 0 : _c.owner) === null || _d === void 0 ? void 0 : _d.id)) {
                authLevel = 4;
            }
            else if ((_e = this.msg.member) === null || _e === void 0 ? void 0 : _e.roles.cache.some(role => role.id === roles.mod)) {
                authLevel = 3;
            }
            else if ((_f = this.msg.member) === null || _f === void 0 ? void 0 : _f.roles.cache.some(role => role.id === roles.hoster)) {
                authLevel = 2;
            }
            else if ((_g = this.msg.member) === null || _g === void 0 ? void 0 : _g.roles.cache.some(role => role.id === roles.member)) {
                authLevel = 1;
            }
            return (authLevel >= auth[role]);
        });
    }
    isInGame() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                var res = yield index_1.client(`/users/isUserInGame`, { params: this });
                return Object.assign(new User(this.msg), res.data);
            }
            catch (err) {
            }
        });
    }
}
exports.User = User;
//# sourceMappingURL=index.js.map