"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.API = void 0;
const tslib_1 = require("tslib");
const chalk_logging_1 = tslib_1.__importDefault(require("chalk-logging"));
const index_1 = require("../index");
const res_codes_1 = require("res-codes");
class API {
    constructor(opt) {
        this.opt = opt;
    }
    static find(options, opt) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                var res = yield index_1.client.get(`/${this.name}s/`, { params: options });
                if (res.data.length === 0) {
                    chalk_logging_1.default.warning(res.statusText);
                }
                else {
                    chalk_logging_1.default.success(res.statusText);
                }
                return res.data.map((data) => data = Object.assign(new this(opt), data));
            }
            catch (err) {
                res_codes_1.handleError(err);
                1;
            }
        });
    }
    static findOne(options, opt) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                var res = yield index_1.client.get(`/${this.name}s/findOne`, { params: options });
                chalk_logging_1.default.success(res.statusText);
                return Object.assign(new this(opt), res.data);
            }
            catch (err) {
                res_codes_1.handleError(err);
            }
        });
    }
    static new(options, opt) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                var res = yield index_1.client.post(`/${this.name}s`, { [this.name.toLowerCase()]: options });
                chalk_logging_1.default.success(res.statusText);
                return Object.assign(new this(opt), res.data);
            }
            catch (err) {
                res_codes_1.handleError(err);
            }
        });
    }
    save() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var name = this.constructor.name.toLowerCase();
            try {
                var res = yield index_1.client.put(`/${name}s/`, { [name]: this });
                chalk_logging_1.default.success(res.statusText);
            }
            catch (err) {
                res_codes_1.handleError(err);
            }
        });
    }
    delete() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var name = this.constructor.name.toLowerCase();
            try {
                var res = yield index_1.client.delete(`/${name}s/`, { data: this });
                chalk_logging_1.default.success(res.statusText);
                return true;
            }
            catch (err) {
                res_codes_1.handleError(err);
            }
        });
    }
}
exports.API = API;
//# sourceMappingURL=api.js.map