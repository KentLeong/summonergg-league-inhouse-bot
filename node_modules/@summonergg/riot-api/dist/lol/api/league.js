"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.League = void 0;
const tslib_1 = require("tslib");
const limiter_1 = require("../../modules/limiter");
const chalk_logging_1 = require("chalk-logging");
class League {
    static get(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                var endpoint;
                if (data.challengerLeague) {
                    endpoint = `/lol/league/v4/challengerleagues/by-queue/${data.challengerLeague}`;
                }
                else if (data.masterLeague) {
                    endpoint = `/lol/league/v4/masterleagues/by-queue/${data.masterLeague}`;
                }
                else if (data.grandmasterLeague) {
                    endpoint = `/lol/league/v4/grandmasterleagues/by-queue/${data.grandmasterLeague}`;
                }
                else if (data.summonerId) {
                    endpoint = `/lol/league/v4/entries/by-summoner/${data.summonerId}`;
                }
                else if (data.leagueId) {
                    endpoint = `/lol/league/v4/leagues/${data.leagueId}`;
                }
                else if (data.queue && data.tier && data.division) {
                    endpoint = `/lol/league/v4/entries/${data.queue}/${data.tier}/${data.division}`;
                }
                if (!endpoint)
                    return reject("invalid params");
                try {
                    var res = yield getData(data, endpoint);
                    if (Array.isArray(res)) {
                        var leagueArray = res;
                        var out = leagueArray.map((data) => data = Object.assign(new this(), data));
                        resolve(out);
                    }
                    else if (res.entries) {
                        var leagueList = res;
                        leagueList.entries.map((data) => data = Object.assign(new this(), data));
                        resolve(leagueList);
                    }
                    else {
                        var league = res;
                        resolve(Object.assign(new this(), league));
                    }
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    formatELO() {
        var elo;
        switch (this.tier) {
            case ("IRON"):
                elo = 200;
                break;
            case ("BRONZE"):
                elo = 600;
                break;
            case ("SILVER"):
                elo = 1000;
                break;
            case ("GOLD"):
                elo = 1400;
                break;
            case ("PLATINUM"):
                elo = 1800;
                break;
            case ("DIAMOND"):
                elo = 2200;
                break;
            case ("MASTER" || "CHALLENGER" || "GRANDMASTER"):
                elo = 2600;
                break;
        }
        if (elo < 2600) {
            if (this.rank == "III") {
                elo += 100;
            }
            else if (this.rank == "II") {
                elo += 200;
            }
            else if (this.rank == "I") {
                elo += 300;
            }
        }
        this.elo = elo + this.leaguePoints;
    }
}
exports.League = League;
function getData(data, uri) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                var res = yield limiter_1.api(`${uri}`, data);
                chalk_logging_1.log.success(res.statusText);
                resolve(res.data);
            }
            catch (err) {
                chalk_logging_1.log.error(err);
                reject(err);
            }
        }));
    });
}
//# sourceMappingURL=league.js.map