"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Summoner = void 0;
const tslib_1 = require("tslib");
const limiter_1 = require("../../modules/limiter");
const chalk_logging_1 = require("chalk-logging");
class Summoner {
    static get(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                var endpoint;
                if (data.name) {
                    endpoint = `/lol/summoner/v4/summoners/by-name/${encodeURI(data.name)}`;
                }
                else if (data.summonerId) {
                    endpoint = `/lol/summoner/v4/summoners/${data.summonerId}`;
                }
                else if (data.accountId) {
                    endpoint = `/lol/summoner/v4/summoners/by-account/${data.accountId}`;
                }
                else if (data.puuid) {
                    endpoint = `/lol/summoner/v4/summoners/by-puuid/${data.puuid}`;
                }
                if (!endpoint)
                    return reject("invalid params");
                try {
                    var res = yield getData(data, endpoint);
                    resolve(Object.assign(new this(), res));
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
}
exports.Summoner = Summoner;
function getData(data, uri) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                var res = yield limiter_1.api(`${uri}`, data);
                chalk_logging_1.log.success(res.statusText);
                resolve(res.data);
            }
            catch (err) {
                chalk_logging_1.log.error(`Could not get summoner`);
                reject(err);
            }
        }));
    });
}
//# sourceMappingURL=summoner.js.map