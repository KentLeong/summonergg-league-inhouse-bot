import { api } from "../../modules/limiter";
import { log } from 'chalk-logging';

interface LeagueQuery {
  challengerLeague?: queue;
  masterLeague?: queue;
  grandmasterLeague?: queue;
  summonerId?: string;
  leagueId?: string;
  queue?: queue;
  tier?: tier;
  division?: division;
  region?: string;
}

export class League implements LeagueEntryDTO {
  freshBlood: boolean;
  wins: number;
  summonerName: string;
  inactive: boolean;
  veteran: boolean;
  hotStreak: boolean;
  rank: string;
  leaguePoints: number;
  losses: number;
  summonerId: string;
  tier?: tier;
  leagueId?: string;
  queueType?: queue;
  miniSeries?: MiniSeriesDTO;
  elo?: number;

  static async get(data: LeagueQuery): Promise<League | LeagueListDTO | League[]> {
    return new Promise(async (resolve, reject) => {
      var endpoint: string;
      if (data.challengerLeague) {
        endpoint = `/lol/league/v4/challengerleagues/by-queue/${data.challengerLeague}`;
      } else if (data.masterLeague) {
        endpoint = `/lol/league/v4/masterleagues/by-queue/${data.masterLeague}`;
      } else if (data.grandmasterLeague) {
        endpoint = `/lol/league/v4/grandmasterleagues/by-queue/${data.grandmasterLeague}`;
      } else if (data.summonerId) {
        endpoint = `/lol/league/v4/entries/by-summoner/${data.summonerId}`;
      } else if (data.leagueId) {
        endpoint = `/lol/league/v4/leagues/${data.leagueId}`;
      } else if (data.queue && data.tier && data.division) {
        endpoint = `/lol/league/v4/entries/${data.queue}/${data.tier}/${data.division}`;
      }
      if (!endpoint) return reject("invalid params");
      try {
        var res: any = await getData(data, endpoint);
        if (Array.isArray(res)) {
          var leagueArray: League[] = res;
          var out = leagueArray.map((data: LeagueEntryDTO) => data = Object.assign(new this(), data));
          resolve(out);
        } else if (res.entries) {
          var leagueList: LeagueListDTO = res;
          leagueList.entries.map((data: LeagueItemDTO) => data = Object.assign(new this(), data));
          resolve(leagueList);
        } else {
          var league: League = res;
          resolve(Object.assign(new this(), league));
        }
      } catch(err) {
        reject(err)
      }
    })
  }

  formatELO() {
    var elo: number;
    switch(this.tier) {
      case("IRON"):
        elo = 200;
        break;
      case("BRONZE"):
        elo = 600;
        break;
      case("SILVER"):
        elo = 1000;
        break;
      case("GOLD"):
        elo = 1400;
        break;
      case("PLATINUM"):
        elo = 1800;
        break;
      case("DIAMOND"):
        elo = 2200;
        break;
      case("MASTER" || "CHALLENGER" || "GRANDMASTER"):
        elo = 2600;
        break;
    }
    if (elo < 2600) {
      if (this.rank == "III") {
        elo += 100;
      } else if (this.rank == "II") {
        elo += 200;
      } else if (this.rank == "I") {
        elo += 300;
      }
    }
    this.elo = elo + this.leaguePoints;
  }
}

async function getData(data: LeagueQuery, uri: string): Promise<League | LeagueListDTO> {
  return new Promise(async (resolve, reject) => {
    try {
      var res = await api(`${uri}`, data);
      log.success(res.statusText);
      resolve(res.data);
    } catch(err) {
      log.error(err)
      reject(err);
    }
  })
}