import { api } from "../../modules/limiter";
import { log } from "chalk-logging";

interface SummonerQuery {
  name?: string;
  summonerId?: string;
  accountId?: string;
  puuid?: string;
  region?: string;
  api_key?: string;
}

export class Summoner implements SummonerDTO {
  profileIconId: number;
  name: string;
  puuid: string;
  summonerLevel: number;
  accountId: string;
  id: string;
  revisionDate: number;
  region?: string;
  rank?: string;
  lp?: number;
  wins?: number;
  losses?: number;
  elo?: number;

  static async get(data: SummonerQuery): Promise<any> {
    return new Promise(async (resolve, reject) => {
      var endpoint: string;
      if (data.name) {
        endpoint = `/lol/summoner/v4/summoners/by-name/${encodeURI(data.name)}`;
      } else if (data.summonerId) {
        endpoint = `/lol/summoner/v4/summoners/${data.summonerId}`;
      } else if (data.accountId) {
        endpoint = `/lol/summoner/v4/summoners/by-account/${data.accountId}`;
      } else if (data.puuid) {
        endpoint = `/lol/summoner/v4/summoners/by-puuid/${data.puuid}`;
      }
      if (!endpoint) return reject("invalid params");
      try {
        var res: any = await getData(data, endpoint);
        resolve(Object.assign(new this(), res));
      } catch(err) {
        reject(err)
      }
    })
  }
}

async function getData(data: SummonerQuery, uri: string): Promise<Summoner> {
  return new Promise(async (resolve, reject) => {
    try {
      var res = await api(`${uri}`, data);
      log.success(res.statusText);
      resolve(res.data)
    } catch(err) {
      log.error(`Could not get summoner`);
      reject(err);
    }
  })
}
