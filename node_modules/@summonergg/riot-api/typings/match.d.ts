type MatchDTO = {
  gameId?: number;
  participantIdentities?: Array<ParticipantIdentityDTO>;
  queueId?: number;
  gameType?: string;
  gameDuration?: number;
  teams?: Array<>;
  platformId?: string;
  gameCreation?: number;
  seasonId?: number;
  gameVersion?: string;
  mapId?: number;
  gameMode?: string;
  participants?: Array<>;
}

type ParticipantIdentityDTO = {
  participantId?: number;
  player?: PlayerDTO;
}

type PlayerDTO = {
  profileIcon?: number;
  accountId?: string;
  matchHistoryUri?: string;
  currentAccountId?: string;
  currentPlatformId?: string;
  summonerName?: string;
  summonerId?: string;
  platformId?: string;
}

type TeamStatsDTO = {
  towerKills?: number;
  riftHeraldKills?: number;
  firstBlood?: boolean;
  inhibitorKills?: number;
  bans?: Array<TeamBansDTO>;
  firstBaron?: boolean;
  firstDragon?: boolean;
  dominionVictoryScore?: number;
  dragonKills?: number;
  baronKills?: number;
  firstInhibitor?: boolean;
  firstTower?: boolean;
  vilemawKills?: number;
  firstRiftHerald?: boolean;
  teamId?: number;
  win?: string;
}

type TeamBansDTO = {
  championId?: number;
  pickTurn?: number;
}

type ParticipantDTO = {
  participantId?: number;
  championId?: number;
  runes?: Array<RuneDTO>;
  stats?: ParticipantStatsDTO;
  teamId?: number;
  timeline?: ParticipantTimelineDTO;
  spell1Id?: number;
  spell2Id?: number;
  highestAchievedSeasonTier?: string;
  masteries?: Array<MasteryDTO>;
}

type RuneDTO = {
  runeId?: number;
  rank?: number;
}

type ParticipantStatsDTO = {
  item0?: number;
  item2?: number;
  totalUnitsHealed?: number;
  item1?: number;
  largestMultiKill?: number;
  goldEarned?: number;
  firstInhibitorKill?: boolean;
  physicalDamageTaken?: number;
  nodeNeutralizeAssist?: number;
  totalPlayerScore?: number;
  champLevel?: number;
  damageDealtToObjectives?: number;
  totalDamageTaken?: number;
  neutralMinionsKilled?: number;
  deaths?: number;
  tripleKills?: number;
  magicDamageDealtToChampions?: number;
  wardsKilled?: number;
  pentaKills?: number;
  damageSelfMitigated?: number;
  largestCriticalStrike?: number;
  nodeNeutralize?: number;
  totalTimeCrowdControlDealt?: number;
  firstTowerKill?: boolean;
  magicDamageDealt?: number;
  totalScoreRank?: number;
  nodeCapture?: number;
  wardsPlaced?: number;
  totalDamageDealt?: number;
  timeCCingOthers?: number;
  magicalDamageTaken?: number;
  largestKillingSpree?: number;
  totalDamageDealtToChampions?: number;
  physicalDamageDealtToChampions?: number;
  neutralMinionsKilledTeamJungle?: number;
  totalMinionsKilled?: number;
  firstInhibitorAssist?: boolean;
  visionWardsBoughtInGame?: number;
  objectivePlayerScore?: number;
  kills?: number;
  firstTowerAssist?: boolean;
  combatPlayerScore?: number;
  inhibitorKills?: number;
  turretKills?: number;
  participantId?: number;
  trueDamageTaken?: number;
  firstBloodAssist?: boolean;
  nodeCaptureAssist?: number;
  assists?: number;
  teamObjective?: number;
  altarsNeutralized?: number;
  goldSpent?: number;
  damageDealtToTurrets?: number;
  altarsCaptured?: number;
  win?: boolean;
  totalHeal?: number;
  unrealKills?: number;
  visionScore?: number;
  physicalDamageDealt?: number;
  firstBloodKill?: boolean;
  longestTimeSpentLiving?: number;
  killingSprees?: number;
  sightWardsBoughtInGame?: number;
  trueDamageDealtToChampions?: number;
  neutralMinionsKilledEnemyJungle?: number;
  doubleKills?: number;
  trueDamageDealt?: number;
  quadraKills?: number;
  item4?: number;
  item3?: number;
  item6?: number;
  item5?: number;
  playerScore0?: number;
  playerScore1?: number;
  playerScore2?: number;
  playerScore3?: number;
  playerScore4?: number;
  playerScore5?: number;
  playerScore6?: number;
  playerScore7?: number;
  playerScore8?: number;
  playerScore9?: number;
  perk0?: number;
  perk0Var1?: number;
  perk0Var2?: number;
  perk0Var3?: number;
  perk1?: number;
  perk1Var1?: number;
  perk1Var2?: number;
  perk1Var3?: number;
  perk2?: number;
  perk2Var1?: number;
  perk2Var2?: number;
  perk2Var3?: number;
  perk3?: number;
  perk3Var1?: number;
  perk3Var2?: number;
  perk3Var3?: number;
  perk4?: number;
  perk4Var1?: number;
  perk4Var2?: number;
  perk4Var3?: number;
  perk5?: number;
  perk5Var1?: number;
  perk5Var2?: number;
  perk5Var3?: number;
  perkPrimaryStyle?: number;
  perkSubStyle?: number;
  statPerk0?: number;
  statPerk1?: number;
  statPerk2?: number;
}

type ParticipantTimelineDTO = {
  participantId?: number;
  csDiffPerMinDeltas?: Record<string, number>;
  damageTakenPerMinDeltas?: Record<string, number>;
  role?: string;
  damageTakenDiffPerMinDeltas?: Record<string, number>;
  xpPerMinDeltas?: Record<string, number>;
  xpDiffPerMinDeltas?: Record<string, number>;
  lane?: string;
  creepsPerMinDeltas?: Record<string, number>;
  goldPerMinDeltas?: Record<string, number>;
}

type MasteryDTO = {
  rank?: number;
  masteryId?: number;
}

type MatchListDTO = {
  startIndex?: number;
  totalGames?: number;
  endIndex?: number;
  matches?: Array<MatchRefrenceDTO>;
}

type MatchRefrenceDTO = {
  gameid?: number;
  role?: string;
  season?: number;
  platformId?: string;
  champion?: number;
  queue?: number;
  lane?: string;
  timestamp?: number;
}

type MatchTimelineDTO = {
  frames?: Array<MatchFrameDTO>;
  frameInterval?: number;
}

type MatchFrameDTO = {
  participantFrames?: Record<string, MatchParticipantFrameDTO>;
  events?: Array<MatchEventDTO>;
  timestamp?: number;
}

type MatchParticipantFrameDTO = {
  participantId?: number;
  minionsKilled?: number;
  teamScore?: number;
  dominionScore?: number;
  totalGold?: number;
  level?: number;
  xp?: number;
  currentGold?: number;
  position?: MatchPositionDTO;
  jungleMinionsKilled?: number;
}

type MatchPositionDTO = {
  x?: number;
  y?: number;
}

type MatchEventDTO = {
  laneType?: string;
  skillSlot?: number;
  ascendedType?: string;
  creatorId?: number;
  afterId?: number;
  eventType?: string;
  type?: string;
  levelUpType?: string;
  wardType?: string;
  participantId?: number;
  towerType?: string;
  itemId?: number;
  beforeId?: number;
  pointCaptured?: string;
  monsterType?: string;
  monsterSubType?: string;
  teamId?: number;
  position?: MatchPositionDTO;
  killerId?: number;
  timestamp?: number;
  assistingParticipantIds?: Array<number>;
  buildingType?: string;
  victimId?: number;
}